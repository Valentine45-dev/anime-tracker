// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  bio       String?
  joinDate  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  animeLists AnimeList[]
  reviews    Review[]
  communities CommunityMember[]
  posts      Post[]
  comments   Comment[]

  @@map("users")
}

model Anime {
  id          Int      @id
  title       String
  titleEnglish String?
  description String?
  coverImage  String?
  bannerImage String?
  episodes    Int?
  status      String?
  format      String?
  season      String?
  seasonYear  Int?
  genres      String   // JSON array of genres
  tags        String   // JSON array of tags
  averageScore Float?
  popularity  Int?
  studios     String   // JSON array of studio names
  source      String?
  duration    Int? // in minutes
  startDate   DateTime?
  endDate     DateTime?
  nextAiringEpisode Int?
  nextAiringTime    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  animeLists AnimeList[]
  reviews    Review[]

  @@map("anime")
}

model AnimeList {
  id          String   @id @default(cuid())
  userId      String
  animeId     Int
  status      String   // watching, completed, on_hold, dropped, plan_to_watch
  progress    Int      @default(0) // episodes watched
  rating      Int?     // 1-10 rating
  notes       String?
  startDate   DateTime?
  completedDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  anime Anime @relation(fields: [animeId], references: [id])

  @@unique([userId, animeId])
  @@map("anime_lists")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  animeId   Int
  rating    Int      // 1-10 rating
  content   String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  anime Anime @relation(fields: [animeId], references: [id])

  @@unique([userId, animeId])
  @@map("reviews")
}

model Community {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  image       String?
  category    String
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members CommunityMember[]
  posts   Post[]

  @@map("communities")
}

model CommunityMember {
  id          String   @id @default(cuid())
  userId      String
  communityId String
  role        String   @default("member") // member, moderator, admin
  joinedAt    DateTime @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@map("community_members")
}

model Post {
  id          String   @id @default(cuid())
  userId      String
  communityId String
  title       String
  content     String
  imageUrl    String?
  likes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  comments  Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}
